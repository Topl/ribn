// Mocks generated by Mockito 5.0.15 from annotations
// in ribn/test/shared_mocks.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;
import 'dart:typed_data' as _i9;

import 'package:bip_topl/bip_topl.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mubrambl/src/credentials/address.dart' as _i4;
import 'package:mubrambl/src/credentials/hd_wallet_helper.dart' as _i2;
import 'package:ribn/models/ribn_address.dart' as _i3;
import 'package:ribn/repositories/keychain_repository.dart' as _i11;
import 'package:ribn/repositories/login_repository.dart' as _i8;
import 'package:ribn/repositories/misc_repository.dart' as _i10;
import 'package:ribn/repositories/onboarding_repository.dart' as _i6;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeBip32KeyPair_0 extends _i1.Fake implements _i2.Bip32KeyPair {}

class _FakeRibnAddress_1 extends _i1.Fake implements _i3.RibnAddress {}

class _FakeToplAddress_2 extends _i1.Fake implements _i4.ToplAddress {}

class _FakeBip32SigningKey_3 extends _i1.Fake implements _i5.Bip32SigningKey {}

class _FakeBip32VerifyKey_4 extends _i1.Fake implements _i5.Bip32VerifyKey {}

/// A class which mocks [OnboardingRespository].
///
/// See the documentation for Mockito's code generation for more information.
class MockOnboardingRespository extends _i1.Mock
    implements _i6.OnboardingRespository {
  MockOnboardingRespository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<Map<dynamic, dynamic>> generateMnemonicAndKeystore(
          String? password) =>
      (super.noSuchMethod(
              Invocation.method(#generateMnemonicAndKeystore, [password]),
              returnValue:
                  Future<Map<dynamic, dynamic>>.value(<dynamic, dynamic>{}))
          as _i7.Future<Map<dynamic, dynamic>>);
  @override
  _i2.Bip32KeyPair deriveToplExtendedKeys(String? mnemonic) => (super
      .noSuchMethod(Invocation.method(#deriveToplExtendedKeys, [mnemonic]),
          returnValue: _FakeBip32KeyPair_0()) as _i2.Bip32KeyPair);
  @override
  String toString() => super.toString();
}

/// A class which mocks [LoginRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginRepository extends _i1.Mock implements _i8.LoginRepository {
  MockLoginRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Uint8List decryptKeyStore(String? keyStoreJson, String? password) =>
      (super.noSuchMethod(
          Invocation.method(#decryptKeyStore, [keyStoreJson, password]),
          returnValue: _i9.Uint8List(0)) as _i9.Uint8List);
  @override
  String toString() => super.toString();
}

/// A class which mocks [MiscRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMiscRepository extends _i1.Mock implements _i10.MiscRepository {
  MockMiscRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<void> persistAppState(String? appState) =>
      (super.noSuchMethod(Invocation.method(#persistAppState, [appState]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  String toString() => super.toString();
}

/// A class which mocks [KeychainRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockKeychainRepository extends _i1.Mock
    implements _i11.KeychainRepository {
  MockKeychainRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.RibnAddress generateAddress(_i2.HdWallet? hdWallet,
          {int? purpose = 2147485500,
          int? coinType = 2147490739,
          int? account = 2147483648,
          int? change = 0,
          int? addr = 0}) =>
      (super.noSuchMethod(
          Invocation.method(#generateAddress, [
            hdWallet
          ], {
            #purpose: purpose,
            #coinType: coinType,
            #account: account,
            #change: change,
            #addr: addr
          }),
          returnValue: _FakeRibnAddress_1()) as _i3.RibnAddress);
  @override
  String getKeyPath(int? purpose, int? coinType, int? account, int? change,
          int? address) =>
      (super.noSuchMethod(
          Invocation.method(
              #getKeyPath, [purpose, coinType, account, change, address]),
          returnValue: '') as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [RibnAddress].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockRibnAddress extends _i1.Mock implements _i3.RibnAddress {
  MockRibnAddress() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.ToplAddress get address =>
      (super.noSuchMethod(Invocation.getter(#address),
          returnValue: _FakeToplAddress_2()) as _i4.ToplAddress);
  @override
  int get addressIndex =>
      (super.noSuchMethod(Invocation.getter(#addressIndex), returnValue: 0)
          as int);
  @override
  int get accountIndex =>
      (super.noSuchMethod(Invocation.getter(#accountIndex), returnValue: 0)
          as int);
  @override
  int get changeIndex =>
      (super.noSuchMethod(Invocation.getter(#changeIndex), returnValue: 0)
          as int);
  @override
  String get keyPath =>
      (super.noSuchMethod(Invocation.getter(#keyPath), returnValue: '')
          as String);
  @override
  _i3.RibnAddress copyWith(
          {_i4.ToplAddress? address,
          int? addressIndex,
          int? accountIndex,
          int? changeIndex,
          String? keyPath}) =>
      (super.noSuchMethod(
          Invocation.method(#copyWith, [], {
            #address: address,
            #addressIndex: addressIndex,
            #accountIndex: accountIndex,
            #changeIndex: changeIndex,
            #keyPath: keyPath
          }),
          returnValue: _FakeRibnAddress_1()) as _i3.RibnAddress);
  @override
  Map<String, dynamic> toMap() =>
      (super.noSuchMethod(Invocation.method(#toMap, []),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  String toJson() =>
      (super.noSuchMethod(Invocation.method(#toJson, []), returnValue: '')
          as String);
  @override
  String toString() => super.toString();
}

/// A class which mocks [HdWallet].
///
/// See the documentation for Mockito's code generation for more information.
class MockHdWallet extends _i1.Mock implements _i2.HdWallet {
  MockHdWallet() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.Uint8List get entropy => (super.noSuchMethod(Invocation.getter(#entropy),
      returnValue: _i9.Uint8List(0)) as _i9.Uint8List);
  @override
  set entropy(_i9.Uint8List? _entropy) =>
      super.noSuchMethod(Invocation.setter(#entropy, _entropy),
          returnValueForMissingStub: null);
  @override
  String get password =>
      (super.noSuchMethod(Invocation.getter(#password), returnValue: '')
          as String);
  @override
  _i5.Bip32SigningKey get rootSigningKey =>
      (super.noSuchMethod(Invocation.getter(#rootSigningKey),
          returnValue: _FakeBip32SigningKey_3()) as _i5.Bip32SigningKey);
  @override
  _i5.Bip32VerifyKey get rootVerifyKey =>
      (super.noSuchMethod(Invocation.getter(#rootVerifyKey),
          returnValue: _FakeBip32VerifyKey_4()) as _i5.Bip32VerifyKey);
  @override
  _i2.Bip32KeyPair derive({_i2.Bip32KeyPair? keys, int? index}) =>
      (super.noSuchMethod(
          Invocation.method(#derive, [], {#keys: keys, #index: index}),
          returnValue: _FakeBip32KeyPair_0()) as _i2.Bip32KeyPair);
  @override
  _i2.Bip32KeyPair deriveAddress(
          {int? purpose = 2147485500,
          int? coinType = 2147490739,
          int? account = 2147483648,
          int? change = 0,
          int? address = 0}) =>
      (super.noSuchMethod(
          Invocation.method(#deriveAddress, [], {
            #purpose: purpose,
            #coinType: coinType,
            #account: account,
            #change: change,
            #address: address
          }),
          returnValue: _FakeBip32KeyPair_0()) as _i2.Bip32KeyPair);
  @override
  _i2.Bip32KeyPair deriveLastThreeLayers(
          {int? account = 2147483648, int? change = 0, int? address = 0}) =>
      (super.noSuchMethod(
          Invocation.method(#deriveLastThreeLayers, [],
              {#account: account, #change: change, #address: address}),
          returnValue: _FakeBip32KeyPair_0()) as _i2.Bip32KeyPair);
  @override
  _i4.ToplAddress toBaseAddress(
          {_i5.Bip32PublicKey? spend, int? networkId = 16}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toBaseAddress, [], {#spend: spend, #networkId: networkId}),
          returnValue: _FakeToplAddress_2()) as _i4.ToplAddress);
  @override
  String toString() => super.toString();
}
